rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isRuler() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ruler', 'chief', 'elder'];
    }
    
    function isActiveUser() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    function isCommunityMember(communityId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.community == communityId;
    }
    
    function isInvolvedInDispute(disputeId) {
      let dispute = get(/databases/$(database)/documents/disputes/$(disputeId)).data;
      return isAuthenticated() && 
             (request.auth.uid == dispute.complainant || 
              request.auth.uid == dispute.respondent ||
              request.auth.uid in dispute.assignedRuler ||
              request.auth.uid in dispute.assignedElders);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin() || isRuler());
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Communities collection
    match /communities/{communityId} {
      allow read: if isAuthenticated() && (isAdmin() || isCommunityMember(communityId));
      allow create: if isAuthenticated() && (isAdmin() || isRuler());
      allow update: if isAuthenticated() && (isAdmin() || isRuler());
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Disputes collection
    match /disputes/{disputeId} {
      allow read: if isAuthenticated() && (isAdmin() || isInvolvedInDispute(disputeId) || isRuler());
      allow create: if isAuthenticated() && isActiveUser();
      allow update: if isAuthenticated() && (isAdmin() || isInvolvedInDispute(disputeId) || isRuler());
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Events collection
    match /events/{eventId} {
      allow read: if isAuthenticated() && (isAdmin() || isCommunityMember(resource.data.community));
      allow create: if isAuthenticated() && isActiveUser();
      allow update: if isAuthenticated() && (isAdmin() || isOwner(resource.data.organizer) || isRuler());
      allow delete: if isAuthenticated() && (isAdmin() || isOwner(resource.data.organizer));
    }
    
    // Announcements collection
    match /announcements/{announcementId} {
      allow read: if isAuthenticated() && (isAdmin() || isCommunityMember(resource.data.community));
      allow create: if isAuthenticated() && (isAdmin() || isRuler());
      allow update: if isAuthenticated() && (isAdmin() || isOwner(resource.data.author) || isRuler());
      allow delete: if isAuthenticated() && (isAdmin() || isOwner(resource.data.author));
    }
    
    // Reports collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && (isAdmin() || isRuler());
      allow create: if isAuthenticated() && (isAdmin() || isRuler());
      allow update: if isAuthenticated() && (isAdmin() || isRuler());
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
